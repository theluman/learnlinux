#!/usr/bin/env python
#-*- coding:utf-8 -*-
'''
rsync 数据同步服务
    rsync是开源的，快速的，多功能的、可实现全量及增量的本地或远程数据镜像同步备份的优秀工具，rsync适用于unix linux windows 等多种平台

    rsync具有可使本地和远程两台主机之间的数据快速复制同步镜像，远程备份等功能，这个功能类似scp，但由于scp的功能，当然，rsync还可以在本地主机的不同分区或目录之间全量及增量的复制数据，这类似cp命令，同样也优于cp命令
    rsync还可以实现类似rm的删除功能
关键字 全量，增量，本地，远程 同步备份工具

在同步备份默认下，rsync通过其独特的‘quick check’ 算法，仅同步大小或者最后修改时间发生变化的文件或目录。
    通过参数设置可以实现其他标准的同步，权限变化，某一文件的内容变化同步

rsync的特性：
    支持拷贝特殊文件，如链接，设备等
    可以有排除指定文件或目录的同步的功能，相当于打包命令的排除功能
    可以做到保持原来文件或目录的权限、时间、软硬链接,属主，组等所有属性均不改变
    可实现增量同步，即只同步发生数据变化的数据，因此数据传输效率很高
    rsync本身传输是不加密的，可以使用rcp,rsh,ssh,等方式配合传输文件，
    可以直接通过socket（进程方式）传输
    支持匿名的或认证（无需系统用户）的进程传输模式，可实现方便安全的进行数据备份及镜像

rsync的工作方式
    大致三种
    1、主机本地之间的数据传输（此时类似于cp）
    2、借助rcp,ssh等通道来进行数据传输（此时类似scp）
    3、以守护进程的方式传输数据（这个是rsync的重要功能）
使用
1、本地传输模式
    rsync [option] SRC... [DEST]
    语法说明
        1.rsync为同步命令
        2.[option] 为同步时的参数选项
        3.SRC为源，及等待拷贝的分区，文件，或目录等
        4.[DEST]为目标分区，文件或目录等

2、通过远程shell 进行数据传输
    拉取pull   rsync [opition] [USER@]HOST:SRC... [DEST]
    推送push   rsync [option] SRC... [USER@]HOST:DEST
        拉取语法实例
            rsync -vzrtopgP -e 'ssh -p 22' sshfenfa@192.168.1.121:/opt /tmp
        推送语法实例
            rsync -vzrtopP -e 'ssh -p 22' /etc sshfenf@192.168.1.122:/tmp
                -vzrtopg 相当于-avz 表示同步时文件和目录属性不变
                --progress 显示同步的过程，可以用-P替换
                -e 'ssh -p 22' 表示通过ssh的通道传输数据 -p 22可以省略
            -avz是常用的参数
3、使用守护进程的方式数据传输
    通过守护进程方式传输同样分为两种情况，每种情况又有两种语法写法
        拉取：
            1.rsync [option] [USER@]HOST::SRC... [DEST]
            2.rsync [option] rsync://[USER@]HOST[:PORT]/SRC... [DEST]
        推送：
            1.rsync [option] SRC... [USER@]HOST::DEST
            2.rsync [option] SRC... rsync://[USER@]HOST[:PORT]/DEST
    注意，与远程shell方式命令不同的是，第一种语法，均为双冒号链接SRC与DEST,另外，这个SRC或DEST不再是路径了，而是守护进程中配置的模块名称

rsync命令参数选项
    -v，--verbose 详细模式输出，传输时的进度等信息
    -z,--compress 传输时进行压缩以提高传输效率 --compress-level=NUM 可按级别压缩
    -r,--recursive 对子目录以递归模式，即目录下所有文巨都同样传输
    -t,--times保持文件时间信息
    -a,--archive 归档模式，以递归的模式传输，并保持所有文件属性，相当于-rlptgoD
    -P,--progress，显示同步过程，相似与-v
    -e,加通道的
    --exclude=PATTERN 指定排除的信息

关键点
注意命令差别
    1. rsync -avz /opt/ /tmp
        /opt/意思是仅把/opt/目录里面的内容同步过来，opt目录本身并不同步；而/opt表示把opt本身及其内容全部同步，要注意区别

rsync 最重要的应用
以守护进程（socket）的方式传输数据

机器准备 A-server rsync服务端  B-server  rsync节点  C-server rsync节点

具体需求
    要求在A-server上以rsync守护进程的方式部署rsync服务，使得所有客户端主机，可以把本地数据通过rsync的方式到数据备份服务器A-server上，客户端服务器以B,C为例 图21

开始部署rsync服务-rsync服务端操作
1.配置rsyncd.conf
    确认rsync软件是否安装
[root@6.4-121 ~]#rpm -qa rsync
rsync-3.0.6-12.el6.x86_64
[root@6.4-121 ~]#
    编辑配置文件，rsync默认没有配置文件，需要新建/etc/rsyncd.conf  注意rsyncd不要丢了d
        #rsync_config_________________________start
        #created by dean 9:25 2016-8-9
        #QQ email
        ##rsyncd.conf start##
        uid = rsync               rsync使用的用户，缺省值为-2，通常为nobody
        gid = rsync             组，通用户
        use chroot = no       如果为true,daemon会在给客户端传输文件前“chroot to the path” 这是一个rsync的安全配置，内网使用不配也可以
        max connections = 200     最大连接数
        timeout = 300         超时时间    默认是0意思是no time，单位秒，建议300-600
        pid file = /var/run/rsyncd.pid     rsync启动后将进程写入这个文件，如果文件已经存在，rsync不会启动，会终止，此时需要删掉文件重新启动
        lock file = /var/run/rsync.lock 指定lock文件用来支持 max connections 参数，使得总连接数不会超过限制
        log file = /var/log/rsyncd.log  日志文件，不设置或者错误设置，rsync会使用syslog输出日志信息
        [oldboy]  模块名
        path = /dean/ 服务端物理路径
        ignore errors  忽略I/O错误
        read only = false   true的话是只读，false是可写，默认是true,只有false情况下，客户端才能上传文件
        list = false   是否允许客户端查看可用模块列表，默认是可以
        hosts allow = 192.168.1.1/24 指定可以链接的客户端主机名和ip 或地址段 ip段
        hosts deny = 0.0.0.0/32 指定不可以链接的客户端主机名和ip 或地址段 ip段，默认没有此参数，及都可以链接
        auth users = rsync_backup  指定空格或逗号分隔的用户可以使用哪些模块，用户不需要在本地系统中存在，默认所有用户无密码访问（anonymous rsync）
        secrets file = /etc/rsync.password 指定用户名密码存放文件格式  用户名:密码
        #rsync_config__________________________end
2. 处理添加路径 /dean, 用户添加useradd rsync -s /sbin/nologin -M,目录授权，chown -R rsync.rsync /dean
3.配置用于rsync同步的账号，密码及账号文件权限
    echo "rsync_backup:123456" > /etc/rsync.password
        其中rsync_backup:123456中的rsync_backup为同步传输用到的虚拟账号，这个账号仅为rsync的账号，不需要是系统账号，后面的123456为密码，不超过8位，中心用：号分割
    chmod 600 /etc/rsync.password 必须为600权限，因为密码是明文的，所以设置600安全，进root能修改查看
    cat /etc/rsync.password
    ll /etc/rsync.password
4.启动rsync服务
    以守护进程方式来启动rsync服务
        rsync --daemon      --daemon表示以守护进程方式启动
        拓展rsync的参数选项
            --daemon
            --address  绑定ip地址提供服务
            --config=file 更改配置文件路径，而不是默认的/etc/rsyncd.conf
            --port=prot  更改其它端口提供服务，而不是缺省的873端口
            提示，以上几个选项仅为了解，生产场景使用不多
5.添加至开机启动
    echo "/usr/bin/rsync --daemon" >> /etc/rc.local
        注意：当然还可以使用chkconfig rsync on 命令，但是必须要编写适合chkconfig操作的脚本才行
    重启rsync的组合命令
    pkill rsync   关闭rsync服务
    rsync --daemon 启动rsync服务
    检查启动进程
    ps -ef|grep rsync  检查rsync服务
    启动服务扩展，写一个简单脚本
        
配置客户端
1. 配置rsync账号及账号文件权限
    请注意与服务端的配置的区别
    client端 [192.168.1.122] [192.168.1.123]分别做如下操作
        echo "123456" > /etc/rsync.password  这里进配置密码，密码是服务端设置的rsync_backup的密码,不需要账号，与服务端的区别，rsync。password不一定需要与服务端一至
        chmod 600 /etc/rsync.password   必须600，明文存储的密码
        cat /etc/rsync.password
        ll /etc/rsync.password
    配置完成       

客户端操作
推送（从客户端同步文件或目录到服务端）
    从客户端推送/etc 目录到服务端rsync指定的目录  /dean 下
        命令模式一：
        rsync -avzp etc_2016-08-09.tar.gz rsync_backup@192.168.1.121::oldboy  需要密码
        rsync -avzp etc_2016-08-09.tar.gz rsync_backup@192.168.1.121::oldboy --password-file=/etc/rsync.password
        命令模式二：
        rsync -avzp etc_2016-08-09.tar.gz rsync://rsync_backup@192.168.1.121/oldboy --password-file=/etc/rsync.password 
    其中的oldboy 是指的服务端配置文件中模块名字

du -sh 查看目录大小 du -sh /*

问题排错
    1.No route to host问题
        防火墙阻挡，解决：先telnet ip 873,如果出现connection refuse字样，说明防火墙阻挡，或者服务没开启
    2.auth failed on module oldboy
        配置文件没搞对
备份题：备份全网服务数据
图23


拉取除了用于下载
也可以用于分发

排除打包的参数
tar --exclude=FILE -zcvf a.tar.gz ./
tar -ztvf a.tar.gz  不解压情况下 查看压缩包里的文件

rsync的排除命令
    --exclude=PATTERN      exclude file matching PATTERN
    --exclude-from=FILE    read exclude patterns from FILE

exclude=file 还可以写入服务端的/etc/rsyncd.conf
    提示 服务端的排除参数用于客户端拉取时排除，客户端推送时排除在命令行加入--exclude=file

超级重要参数 --delete  删除参数
    本地文件删除
    mkdir null
    rsync -avz --delete null/ /tmp/
        解释：rsync --delete /tmp/ /mnt/  这命令是copy /tmp下的东西到/mnt下，如果/tmp下没有的东西，/mnt下即使有也会删除，所以可以利用建立空目录，rsync -avz --delete null/ 192.1681.1.122/  来删除192.168.1.122里的内容，可以删除大文件
    
    两边无差异同步,内容完全一致
    rsync -avz --delete null/ rsync_backup@192.168.1.121::oldboy/ --password-file=/etc/rsync.password  推送使用要特别小心，容易把目录干掉
    拉取更要注意，别把根目录干掉
    小结论：
        执行--delete 参数从rsync服务端往rsync客户端拉取数据时，一定要小心，最好不要用。它比从rsync客户端带--delete参数往rsync服务端推送危险的多，客户端带--delete参数往服务端推送仅删除服务端模块下的数据，而前者有能力删除rsync客户端本地的所有数据包括根目录下的

rsync无差异同步生产场景的应用：
    一般是有需要两台服务器之间，必须要求数据一致，且实时性又不是很高的情况，如：两台负载均衡下面web服务器之间的同步，或者高可用双机配置之间的同步等，rsync无差异同步非常的危险，而且，有很多替代方案，因此，生产场景没有特殊需求，应避免使用

多模块 多用户
分模块配置差别项，通用的项放到模块外

服务端部署流程回顾
    1、配置rsync的配置文件，默认没有，需要创建 /etc/rsyncd.conf
    2、创建rsync用户和同步的本地目录/oldboy 并根据需要授权目录属主属组为rsync
        目录和/etc/rsync.password为配置文件中path = /oldboy/参数的配置，密码文件权限600
    3、账号及密码文件配置
        echo "rsync_backup:oldboy123" > /etc/rsync.password
        chmod 600 /etc/rsync.pasword
    提示：
        a、/etc/rsync.password 为配置文件中secrets file = /etc/rsync.password 参数的配置
        b、账号rsync_backup 为 /etc/rsync.password 为配置文件中auth users = rsync_backup 参数的配置
    4、启动rsync服务
       rsync --daemon
        echo "/usr/bin/rsync --daemon" >> /etc/rc.local
        cat /etc/rc.loacl|grep daemon 
        ps -ef|grep rsync
    5、重起
        pkill rsync
        rsync --daemon
        ps -ef|grep rsync
客户端配置流程
        echo "服务端设置的密码" > /etc/rsync.password
        chmod 600 /etc/rsync.password
            提示客户端的密码文件路径名字和服务端不要求一致，密码一致即可
客户端操作细节
    推送，抓取
    推送
    rsync -avz /tmp/ rsync_backup@ip::/oldboy/ --password-file=/etc/rsync.password
        #rsync -vzrtopgP 。。。。。。。......
    rsync -avz --delete /tmp/ rsync_backup@ip::/oldboy/ --password-file=/etc/rsync.password
    抓取
    路径反向操作，注意--delete慎重使用

rsync服务端排错思路
    
1、查看rsync服务配置文件路径是否正确，正确默认路径为：/etc/rsyncd.conf
2、查看配置文件里host allow,host deny,允许ip网段是否允许客户端访问ip网段
3、查看配置文件中path参数里的路径是否存在，权限是否正确（正常应为配置文件中的UID参数对应的属主和属组）
4、查看rsync服务是否启动。查看命令为ps -ef|grep rsync,端口是否存在 netstat -lntup|grep 873
5、查看iptables防火墙和selinux是否开启允许rsync服务通过，也可以考虑关闭
6、查看服务端rsync配置的密码文件是否权限为600，密码文件格式是否正确,正确格式 用户名:密码，文件配置路径在 secrect files参数对应
7、如果是推送数据，要查看下，配置rsyncd.conf文件中用户是否对模块下目录有可读写的权限

rsync客户端排错思路
1、查看客户端rsync配置的密码文件是否为600的权限，密码文件格式是否正确，注意仅需要密码，并且和服务端密码一致
2、用telnet链接rsync服务器ip地址873端口，查看服务是否启动（可测试服务端防火墙是否阻挡） telnet 192.168.1.121 873
3、客户端执行命令时，rsync -avz rsync_backup@192.168.1.121::oldboy/test/ /test/ --password-file=/etc/rsync.password
    此命令的细节要记清楚，尤其是192.168.1.121::/oldboy/test/处的双冒号及其随后的oldbiy的斜线多一个少一个 细节

自我模拟排错

sersync
    主要是由rsync+inotify的组合使用，包含一些过滤项
rsync+inotify
    inotify 是一种强大的、细粒度的、异步的文件系统事件监控机制，linux内核从2.6.13起，加入了inotify支持，通过inotify可以监控文件系统中添加、删除、修改、移动等各种事件，利用这个内核接口，第三方软件就可以监控文件系统下文件的各种变化情况，而inotify-tools正是实施这个监控的软件

配置
1、rsync客户端先要实现能向rsync服务端推送文件，这是基础
开始安装：
rsync客户端：（inotify的服务端）
    1、下载inotify-tools, wget https://github.com/rvoicilas/inotify-tools/archive/master.zip，去git上下载
    查看文件系统是否支持inotify ,如果存在以下这三个文件，及表示支持
        [root@6.4-122 tools]#ll /proc/sys/fs/inotify
        total 0
        -rw-r--r-- 1 root root 0 Aug 12 15:56 max_queued_events
        -rw-r--r-- 1 root root 0 Aug 12 15:56 max_user_instances
        -rw-r--r-- 1 root root 0 Aug 12 15:56 max_user_watches
        [root@6.4-122 tools]#

    2、解压，编译安装
        [root@6.4-122 inotify-tools-3.14]#./configure --prefix=/usr/local/inotify-tools-3.14
        [root@6.4-122 inotify-tools-3.14]#make && make install
        [root@6.4-122 inotify-tools-3.14]#ln -s /usr/local/inotify-tools-3.14 /usr/local/inotify
            安装完 /usr/local/inoty/bin 下面有两个脚本  监控一些事件
    3、编写监控脚本
                
            #!/bin/bash
            #some nessary information
            host01=192.168.1.121
            src=/dean/
            dst=oldboy
            user=rsync_backup
            rsync_passfile=/etc/rsync.password
            inotify_home=/usr/local/inotify
            
            #check dictory and file
            if [ ! -e "$src" ] || [ ! -e "$rsync_passfile" ] || [ ! -e "$inotify_home" ]
            then
             echo 'Check File and Folder'
             exit 1
            fi
            
            #jian kong he tong bu
            ${inotify_home}/bin/inotifywait -mrq --timefmt '%d/%m/%y %H:%M' --format '%T %w%f' -e close_write,delete,create,attrib $src | while read file
            do
             rsync -azru --delete $src $user@$host01::${dst}/ --password-file=$rsync_passfile > /dev/null 2>&1
            done
            exit 0
 

    4、设置脚本后台启动
        chmod u+x inotify_rsync.sh
        nohup /scripts/inotify_rsync.sh &
        ps -ef|grep rsync

效率不是很高，每秒钟几百个小文件同步可以使用此方法

sersync
    sersync项目是inotify与rsync技术实现对服务器数据实时同步的解决方案
    目前使用较多的同步程序是sersync(依赖inotify-tools和rsync)，和google开源的openduckbill(同样依赖于inotify-tools)
相比以上两个项目，sersync优点：
1、使用c++ 编写，对linux系统文件产生的临时文件和重复的文件操作会过滤，在结合rsync同步的时候，会减少运行时消耗本地及网络资源，因此速度更快
2、相比较上面两个项目，sersync配置起来很简单，下载源码，其中bin目录下是已经编译好的二进制文件，配置bin目录下的xml文件直接使用即可
3、使用多线程进行同步（即可以并发同步多个不同文件），尤其在同步较大文件时，能够保证多个服务器实时保持同步状态
4、sersync自带出错处理机制，通过失败队列对出错文件重新同步，如果仍然失败，则每10个小时对同步失败的文件在重新同步
5、sersync自带crontab功能，只需在xml配置文件中开启，即可按预设的配置，隔一段时间整体同步一次
6、sersync自带socket与http协议扩展，可以满足有特殊需求的公司二次开发

sersync设计分析
图24,25,26

sersync安装配置
三台服务器Master-sersync,slave1-rsync,slave2-rsync
    Master为同步主服务器，需开启sersync,sersync负责监控监控目录中的事件变化，然后调用rsync命令把更新的文件同步到目标服务器slave，因此需要在主服务器master上设置sersync，在同步目标服务器配置rsync-server(注意是rsync服务),Master上有rsync命令即可，slave上需要配置rsync服务，开启rsync守护进程
    此方法也可以实现批量数据分发
    特别提示
        如果有多台目标服务器，每台都需要配置rsync的配置文件，启动rsync --daemon

1、首先配置目标服务器的rsync,其实就是给目标服务器配置一个rsync服务端
2、Master上配置rsync密码文件，echo '密码' > /etc/rsync.password,权限600
3、手工从Master端同步文件到s1,s2,来测试rsync同步是否成功
4、Master端安装sersync
    wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz
    解压
        [root@6.8-123 tools]#tar xvf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/
        GNU-Linux-x86/
        GNU-Linux-x86/sersync2
        GNU-Linux-x86/confxml.xml
    安装    
        cd /usr/local
        mv GUN-Linux-x86 sersync
        [root@6.8-123 sersync]#tree
        .
        ├── confxml.xml
        └── sersync2

        0 directories, 2 files
        [root@6.8-123 sersync]#
    规范一下文件目录
        cd sersync
        mkdir conf bin logs
        mv confxml.xml conf/
        mv sersync2 bin/sersync
        [root@6.8-123 sersync]#tree
        .
        ├── bin
        │   └── sersync
        ├── conf
        │   └── confxml.xml
        └── logs
        
        3 directories, 2 files
        [root@6.8-123 sersync]#

配置sersync
    先备份配置文件
    cp confxml.xml confxml.xml.backup.2016-08-17
    修改优化confxml.xml
    24-28行 目录部分
         24         <localpath watch="/dean">  本地的监控目录
         25             <remote ip="192.168.1.121" name="oldboy"/> 远程机器的ip 模块名
         26             <remote ip="192.168.8.122" name="oldboy"/> 
         27             <!--<remote ip="192.168.8.40" name="tongbu"/>-->
         28         </localpath>

    30-36行 认证部分 rsync手工命令的集合
         30         <rsync>
         31             <commonParams params="-artuz"/>  命令  -avz..
         32             <auth start="true" users="rsync_backup" passwordfile="/etc/rsync.password"/>
         33             <userDefinedPort start="false" port="874"/><!-- port=874 -->
         34             <timeout start="true" time="100"/><!-- timeout=100 -->
         35             <ssh start="false"/>
         36         </rsync>
    37行  失败写入日志
         37         <failLog path="/usr/local/sersync/logs/rsync_fail_log.sh" timeToExecute="60"/><!--default every 60mins execut    e once-->
            当失败后日志记录写入/usr/local/sersync/logs/rsync_fail_log.sh 并且每60分钟对失败的log进行重新同步
        开启sersync守护进程
            配置环境变量
                echo 'export PATH=$PATH:/usr/local/sersync/bin' >> /etc/profile
                tail -1 /etc/profile
                source /etc/profile
                which sersync
            启动命令
                sersync -r -d -o /usr/local/sersync/conf/confxml.xml   -r先做一次同步，初始化一次   -d以进程启动   -o指定配置文件
                    [root@6.8-123 ~]#sersync -r -d -o /usr/local/sersync/conf/confxml.xml 
                    set the system param
                    execute：echo 50000000 > /proc/sys/fs/inotify/max_user_watches
                    execute：echo 327679 > /proc/sys/fs/inotify/max_queued_events
                    parse the command param
                    option: -r  rsync all the local files to the remote servers before the sersync work
                    option: -d  run as a daemon
                    option: -o  config xml name：  /usr/local/sersync/conf/confxml.xml
                    daemon thread num: 10
                    parse xml config file
                    host ip : localhost host port: 8008
                    daemon start，sersync run behind the console 
                    use rsync password-file :
                    user is rsync_backup
                    passwordfile is     /etc/rsync.password
                    config xml parse success
                    please set /etc/rsyncd.conf max connections=0 Manually
                    sersync working thread 12  = 1(primary thread) + 1(fail retry thread) + 10(daemon sub threads) 
                    Max threads numbers is: 32 = 12(Thread pool nums) + 20(Sub threads)
                    please according your cpu ，use -n param to adjust the cpu rate
                    ------------------------------------------
                    rsync the directory recursivly to the remote servers once
                    working please wait...
                    execute command: cd /dean && rsync -artuz -R --delete ./  --timeout=100 rsync_backup@192.168.1.121::oldboy --password-file=/etc/rsync.password >/dev/null 2>&1 
                    [root@6.8-123 ~]#run the sersync: 
                    watch path is: /dean

        注意发现一个问题：一个confxml.xml文件里的localpath 只生效第一块，多个目录需要配置多个confxml.xml 然后启动，形成多实例

        开机启动
            设置sersync开机启动一般不加r,文件太多时候很浪费时间
                sersync -d -o /usr/local/sersync/conf/conf.xml.xm

提示：sersync 同步受硬盘写入速度，网速等限制，批量写入是并不能做到实时无延迟，千兆服务器一般每秒几十个10到100K文件
    所以sersync 用于海量不行

参数说明
sersync -r 作用是在开始实时监控目录之前，先进行一次整体同步，将Master端与salve端文件弄成一致，在开始监控,特别说明，如果xml配置文件设置了filter为true,则-r参数无效
        -o conf.xml-1.xml 指定配置文件路径，可以指定多次，制作成多实例的sersync
        -n Nun 指定默认线程池的线程总数，不指定情况下，默认是10，如果cpu使用率较高可以降低线程数，如果机器配置较低，可以提高线程数，以提高效率
        -d  以守护进程方式后台启动，
        -m PluginName 不进行同步，值运行插件
        --help没有
sersync 配置文件说明 xml格式的文件
    sersync都是通过xml功能实现的
        注释方式变了,不是#号，是<!-- -->
              1 <?xml version="1.0" encoding="ISO-8859-1"?>
              2 <head version="2.5">
              3     <host hostip="localhost" port="8008"></host>  针对插件的保留字段，不用管
              4     <debug start="false"/>     是否开启debug，开启后会打印信息，可进行调试，生产不开启，测试开启
              5     <fileSystem xfs="false"/>  只有xfs文件系统才需要开启此字段
              6     <filter start="false">    文件过滤功能，sersync会默认过滤系统文件（以.开头 ~结尾的文件），除了这些文件外，在开启此选项进行其他过滤文件自定义设置，相比较rsync的 --exclude功能，此方式过滤在监控时就排除了，大大减少了rsync需要同步的文件数量，提高了效率
              7         <exclude expression="(.*)\.svn"></exclude>
              8         <exclude expression="(.*)\.gz"></exclude>
              9         <exclude expression="^info/*"></exclude>
             10         <exclude expression="^static/*"></exclude>
             11     </filter>
             12     <inotify>        inotify的参数设定（可优化点）对于大多数应用，可以把creatfile设置为false来提高性能，减少rsync通信，因为拷贝文件到监控目录会产生create时间与close_write时间，所以关闭create事件，只监控文件拷贝结束时的事件close_write，同样可以实现完成同步
注意：要使得createFolder 保持为true,如果将createFolder设为false,则不会对产生的目录进行监控，该目录下的子文件与子目录也不会被监控，所以除非特殊需要，要开启createFolder,默认情况下对创建文件（目录）事件与删除文件（目录）事件都进行监控，如果项目中不需要删除远程目标服务器的文件（目录），则delete参数设置为false就可以了
             13         <delete start="true"/>
             14         <createFolder start="true"/>
             15         <createFile start="false"/>
             16         <closeWrite start="true"/>
             17         <moveFrom start="true"/>
             18         <moveTo start="true"/>
             19         <attrib start="false"/>
             20         <modify start="false"/>
             21     </inotify>
             22 
             23     <sersync>
             24         <localpath watch="/dean"> 监控目录，远程主机，rsync模块设置,注意：此处只有第一块的<localpath></localpath> 是生效的，如果继续添加此类块设定无效，需要重现复制本命名xml文件，并sersync命令开启，形成多实例
             25             <remote ip="192.168.1.121" name="oldboy"/>
             26             <remote ip="192.168.1.122" name="oldboy"/>
             27             <!--<remote ip="192.168.8.39" name="tongbu"/>-->
             28             <!--<remote ip="192.168.8.40" name="tongbu"/>-->
             29         </localpath>
             30         <localpath watch="/dean2"> 此处是无效的设置
             31             <remote ip="192.168.1.121" name="oldboy"/>
             32             <remote ip="192.168.1.122" name="oldboy"/>
             33             <!--<remote ip="192.168.8.39" name="tongbu"/>-->
             34             <!--<remote ip="192.168.8.40" name="tongbu"/>-->
             35         </localpath>
             36         <rsync>  rsync相关设置项
             37             <commonParams params="-artuz"/>
             38             <auth start="true" users="rsync_backup" passwordfile="/etc/rsync.password"/>
             39             <userDefinedPort start="false" port="874"/><!-- port=874 -->
             40             <timeout start="true" time="100"/><!-- timeout=100 -->
             41             <ssh start="false"/>
             42         </rsync>
             43         <failLog path="/usr/local/sersync/logs/rsync_fail_log.sh" timeToExecute="60"/><!--defaul    t every 60mins execute once-->  失败的脚本配置
             44         <crontab start="false" schedule="600"><!--600mins-->  定时任务功能，定期整体同步
             45             <crontabfilter start="false"> 定时过滤功能
             46                 <exclude expression="*.php"></exclude>
             47                 <exclude expression="info/*"></exclude>
             48             </crontabfilter>
             49         </crontab>
             50         <plugin start="false" name="command"/>  插件的设置
             51     </sersync>
             52 

             53     <plugin name="command">
             54         <param prefix="/bin/sh" suffix="" ignoreError="true"/>  <!--prefix /opt/tongbu/mmm.sh su    ffix-->
             55         <filter start="false">
             56             <include expression="(.*)\.php"/>
             57             <include expression="(.*)\.sh"/>
             58         </filter>
             59     </plugin>
             60 
             61     <plugin name="socket">
             62         <localpath watch="/opt/tongbu">
             63             <deshost ip="192.168.138.20" port="8009"/>
             64         </localpath>
             65     </plugin>
             66     <plugin name="refreshCDN">
             67         <localpath watch="/data0/htdocs/cms.xoyo.com/site/">
             68             <cdninfo domainname="ccms.chinacache.com" port="80" username="xxxx" passwd="xxxx"/>
             69             <sendurl base="http://pic.xoyo.com/cms"/>
             70             <regexurl regex="false" match="cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images"/>
             71         </localpath>
             72     </plugin>
             73 </head>


sersync插件的配置使用
    xml文件中，plugin标签设置为true时候，同步文件或路径到远程服务器之后会调用插件，通过name参数指定需要的执行的插件，目前支持的有command ,refreshCDN,socket,http四种插件，其中http插件由于兼容性目前已经去除，等待重新加入
    模块也可以单独使用，命令行使用-m 参数即可

    command插件
         53     <plugin name="command">
         54         <param prefix="/bin/sh" suffix="" ignoreError="true"/>  <!--prefix /opt/tongbu/mmm.sh su    ffix-->
         55         <filter start="false">
         56             <include expression="(.*)\.php"/>
         57             <include expression="(.*)\.sh"/>
         58         </filter>
         59     </plugin>
 
当同步文件完成后，会调用command插件，如同步文件是test.php,则test.php文件在改动之后，调用rsync同步到远程服务器后，调用command插件，执行/bin/sh test.php suffix >/dev/null 2>&1,如果suffix设置了，则会放在inotify事件test.php之后，如果ignoreError为true,则会添加>/dev/null 2>&1，如果设置了command的filter为true，include可以对正则匹配

    refreshCDN 同步后刷新cdn
    socket插件，开启后，向指定ip与端口发送inotify所产生的文件路径信息

sersync生产场景
    Sweb静态化服务架构改造实施方案，视频5
sersync压力测试，生产测试报告
    sersync同步小文件性能测试报告，视频6，视频7
        1、查看机器
            dmidecode|grep 'Product Name'
        查看cpu型号
            grep name /proc/cuoinfo
        查看cpu个（核）数
            grep 'physical id' /proc/cpuinfo
        查看cpu使用情况
            top
        查看内存情况
            grep MemTotal /proc/meminfo 
            free -m   
        2、
        知识点：
            1、什么是并发：
                并发指两个或多个事件在同一时间间隔内发生，在多道程序环境下，并发性是指在一段时间内宏观上有多少个程序在同时运行，但在单处理机系统中，每一时刻取仅能有一道程序执行，故微观上这些程序只能是分时的交替进行
                并发是同一时间间隔，在同一时间段内，并发不是时间点，是时间段
            2、什么是网站并发
                网站并发一般认为是单位时间内的访问量，这个单位时间未必是1秒，应该是keepalive生存期的链接都算。只要正在连接，没退出，都应该算一个并发，连接建立后，也许1分钟都占着这个链接

            举例子：
            一个高速公路服务区的厕所，例如有20个坑，假设一次小便时间30秒，那么厕所的并发就是30秒内20人同时小便，并发数20，keepalive时间是30秒,所以./webbench -t 5 -c 10 厕所，并不能压出来瑟缩的并发，webbench是压力工具

如何测试sersync并发
从Master端写文件，观察salve端文件同步情况，一定时间内达到实时同步临界值时，及认为该数值为并发值，Master端创建文件脚本，看图27

        #!/bin/sh
        count=200
        while true
        do
        for ((i=1;i<=$count;i++))
        do
          /bin/cp 10k.jpg /data0/www/www/$i/10k_`echo $(date)$RANDOM|md5sum |cut -c 1-8`.jpg
        done
        sleep 1
        for ((i=1;i<=$count;i++))
        do
          /bin/cp 30k.jpg /data0/www/www/$i/30k_`echo $(date)$RANDOM|md5sum |cut -c 1-8`.jpg
        done
        sleep 1
        for ((i=1;i<=$count;i++))
        do
          /bin/cp 50k.jpg /data0/www/www/$i/50k`echo $(date)$RANDOM|md5sum |cut -c 1-8`.jpg
        done
        sleep 1
        done
通过修改count的值，再去slave端利用tree|wc -l 来同时查看同步情况，也可以写脚本来实现查看功能，来分辨同步的延迟情况
        #!/bin/bash
        count=20
        for ((i=1;i<=$count;i++))
        do
          tree /dean/test | wc -l
          sleep 1
        done
  通过此方法可以测算出master端每秒写入多少个文件，slave端可以1秒内正常同步
    工作中，起码要先写入1000万文件之后，在进行写入同步测试，比较真实

测试报告写法：视频8
    测试数据通过开启两个交谈窗口，然后敲命令
        echo -en "`date +%H%M`\t" >> /tmp/tmp.log && tree |wc -l >> /tmp/tmp.log，可以用脚本
    一定时间后几分钟后，24小时，48小时后，来获得对比的时间及文件数量，最后两个服务器的日志文件paste合成一个，然后awk处理差值，差值小于master端每秒写入的文件数，及任务每秒延迟小，几乎同时同步

sersync 监控，维护，优化
视频9


大数据增量备份问题
数据比较大的时候，备份时候可以不打包，直接使用rsync自己算法增量备份的方式
'''
