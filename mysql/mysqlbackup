#!/usr/bin/env python
#-*- coding:utf-8 -*-
'''
mysql 备份恢复
1、准备工作，建表填充数据
字符集 mysql 5.1
create database dong_test;------相当于拉丁字符集
create database dong_test default character set gbk collate gbk_chinese_ci; ---gbk字符集
create database dong_test default character set utf8 collate utf8_general_ci;---utf8字符集
提示：字符集不一致是数据库乱码的罪魁祸首
    服务器本身字符集
    操作系统的字符集
    数据库服务端字符集
    库和表的字符集
    客户端软件的字符集
都要对应上，不然容易乱码

如果编译时候指定了默认字符集，那么
    create table dong_test;和create database dong_test default character set gbk collate gbk_chinese_ci;方式是等价的

system 命令 临时跳出mysql 执行命令 类似vim !command

mysql> source test.sql 让sql语句文件执行 或 mysql -uroot -p'123456' test < test.sql

set names gbk;---设置字符集

一般在sql文件前边加上set names gbk;防止导入数据乱码

小结：mysql 插入中文不乱码方法
    1、在文件中指定 set names gbk;然后登录mysql,通过source test.sql
    2、在文件中指定set names gbk;然后通过mysql 命令插入数据，mysql -uroot -p'password' test < test.sql
        查看方法mysql -uroot -p'password' -e "set names gbk;select * from test.test;"
    3、mysql -uroot -p'password' --default-character-set=gbk test < test.sql

mysql字符集介绍
mysql 字符集包括字符集 character和校对规则 collation ,字符集定义字符串存储方式，校对规则定义比较字符串的方法

常见字符集 
GBK 定长，双字节，不是国际标准，广泛支持
UTF-8 非定长，1-4字节，广泛支持，mysql也支持
latin1  mysql5.1以前的默认字符集

如何选择合适的字符集：
1、如处理各种各样文字，发布到不同语言国家地区，应选Unicode，utf-8每个汉字三字节
2、如需支持中文，数据量大，性能要求高，可选gbk(定长，每个汉字占双字节，英文也是占双字节）
    提示：如需大量运算，比较排序等，定长字符集更快，性能高

mysql可支持多种字符集，同一台机器，库和表的不同字段都可以指定不同的字符集

show character set; -- 查看mysql支持的字符集

set names gbk;命令到底在做什么？
mysql>show variables;
show variables like '%character_set%';
    mysql> show variables like '%character_set%';
    +--------------------------+-----------------------------------------+
    | Variable_name            | Value                                   |
    +--------------------------+-----------------------------------------+
    | character_set_client     | utf8  客户端字符集  set names gbk;      |
    | character_set_connection | utf8  链接的字符集  set names gbk;      |
    | character_set_database   | utf8   数据库，配置文件指定或建库指定   |
    | character_set_filesystem | binary     文件系统                     |
    | character_set_results    | utf8        返回结果    set names gbk;  |
    | character_set_server     | utf8       服务端    配置文件指定       |
    | character_set_system     | utf8       系统                         |
    | character_sets_dir       | /usr/local/mysql-5.5.32/share/charsets/ |
    +--------------------------+-----------------------------------------+
    8 rows in set (0.00 sec)
    
    mysql> 
set names gbk;就是把上述三个地方更改了，更改my.cnf客户端模块参数后，可以实现set names gbk效果，且永久生效，无需重新服务端，客户端退出重新登录就生效
    [client]
    default-character-set=gbk

更改服务端字符集简单办法：
    [mysqld]
    #default-character-set=gbk----适合mysql5.1
    character-set-server=gbk-----适合mysql5.5
mysqld设置会修改character_set_database和 character_set_server 两处的值，重启mysql服务生效,y有的mysql不支持这个设置

小结：
1、mysql5.1及以前版本my.cnf配置文件[mysqld]模块下添加字符集配置，生效后，会修改会修改character_set_database和 character_set_server 两处的值,mysql5.5上，命令有点变化
2、客户端字符集先设置 set names gbk;可以确保插入中文后，不出现乱码，对执行set names gbk；前插入的中文无效
3、在my.cnf配置文件[client]模块下添加字符配置，生效后，相当于set names gbk;的效果，更改的是character_set_client，character_set_connection，character_set_results 三处的值

备份单个数据库：
数据丢失和网站7*24小时丢失哪个更重要？都很重要，公司不同，具体看业务
    mysqldump --help
    普通备份 -B指令是加入建库命令，切到数据库命令，还原简单
    mysqldump -uroot -p'xianghong379' -B dongwei > ~/dongwei_$(date +%F).sql
    压缩备份
    mysqldump -uroot -p'xianghong379' -B dongwei|gzip > ~/dongwei_$(date +%F).sql.gz
    
恢复
    mysql -uroot -p'xianghong379' < ~/dongwei_2016-08-31.sql------未压缩备份
    gunzip < dongwei_2016-08-31.sql.gz|mysql -uroot -p'xianghong379'----压缩备份的

备份多格库 -B
-B 是关键参数，连接多格库，并增加create database DB_NAME,use DB_NAME
    备份
    mysqldump -uroot -p'xianghong379' -B dongwei1 dongwei2|gzip > ~/dongwei_$(date +%F).sql.gz
    恢复
    mysql -uroot -p'xianghong379' < ~/dongwei_2016-08-31.sql ---未压缩
    gunzip < dongwei_2016-08-31.sql.gz | mysql -uroot -p'xianghong379' ---压缩过的
    
多个库分库备份就一一备份，写脚本实现

备份单个表：
    mysqldump -uroot -p'xianghong379' dongwei student|gzip > student.sql.gz
备份多个表：
    mysqldump -uroot -p'xianghong379' dongwei student course sc|gzip > student.sql.gz
分表备份：
    单表备份命令进行多次操作，脚本实现

备份数据库结构-d
    mysqldump -uroot -p'xianghong379' -d dongwei > dong_jiegou.sql---库结构
    mysqldump -uroot -p'xianghong379' -d dongwei student > dong_jiegou.sql---表结构
让备份少一些注释项，少一些垃圾内容 --compact
    mysqldump -uroot -p'xianghong379' --compact -d dongwei > dong_jiegou.sql

恢复
source恢复
    mysql>source xxxx.sql 默认是登录mysql之前的路径
mysql命令恢复 最标准的,如果备份时使用—B参数，恢复时无需指定恢复到哪个数据库
    mysql -uroot -p'xianghong379' < ~/dongwei_2016-08-31.sql ---未压缩
    gunzip < dongwei_2016-08-31.sql.gz | mysql -uroot -p'xianghong379' ---压缩过的    
非交互式操作mysql -e 参数
    mysql -uroot -p'xianghong379' -e 'use dongwei;select * from student;'
    mysql -uroot -p'xianghong379' -e 'show processlist;'--查看mysql正在执行的语句，长时间存在的语句就是需要优化的
    mysql -uroot -p'xianghong379' -e 'show full processlist;'---显示更全的命令
    mysql -uroot -p'xianghong379' -e 'show variables;'----查看变量
    mysql -uroot -p'xianghong379' -e 'show global status;'----查看全局状态
    
生产常用的命令
    show global status;
    show processlist;
    show full processlist;
    set global key_buffer_size = 32777218
    show variables;
mysql sleep 过多的问题
    谷歌 百度

备份实战：
非常重要，非常重要

全量备份与增量备份
    全量数据就是数据库中的所有数据，全量备份就是把数据库中所有的数据备份。
    mysqldump -uroot -pxianghong379 -S /usr/local/mysql/data/3306/mysql.sock -B -A|gzip > ~/mysqlbak_$(date +%F).sql.gz  这就是全备，但应该加入-F参数，刷新binlog,不加-F参数并不能找到哪些binlog是新增的
    mysqldump -uroot -pxianghong379 -S /usr/local/mysql/data/3306/mysql.sock -F -B -A|gzip > ~/mysqlbak_$(date +%F).sql.gz
    增量数据是从上次全量备份之后更新的新数据.对于mysql来说，binlog日志就是mysql的增量数据

    全量和增量的频率：
1、中小公司，全量一般是每天一次，夜里流量低谷执行
2、单台数据库，如何增量，rsync（配合定时任务频率大一点或者inotify两种方式都不好，最好的办法使用主从同步做备份）增量的把所有的binlog推到备份服务器
3、大公司每周备，每周一次全量（比如每周六00点），下周日到下周六00点前都是增量，优点：节省备份时间，减小备份压力  缺点：备份副本太多，还原很麻烦
4、一主五从，会有一个做备份的从，延迟同步，从库更新永远比主库晚3个小时，如果误操作了主库，从库没有及时更新，保证数据的有效

mysql备份的常用方法
    mysql常用备份方法有逻辑备份和物理备份（oracle也如此）
逻辑备份
    逻辑备份其实就是mysqldump 把mysql数据备份成sql语句存储，在恢复时候通过执行mysql恢复命令mysql即可将存储的sql语句还原到数据库中.
    增量备份，备份binlog即可，如何恢复呢？mysqlbinlog工具可以把binlog日志转换成sql语句，然后通过mysql来导入恢复
    常用工具为mysql自带的mysqldump
物理备份
    mysql物理备份方法之一是使用cp,rsync,tar,scp等复制工具把mysql文件复制成多份，由于在备份期间数据仍然在写入数据库，所有直接复制的方式备份会引起数据丢失，另外在恢复数据时，对新数据库的路径，配置也有要求，一般要和原库的配置保持一致
    为了确保备份期间数据一致性，可以选择人工停库或者锁库后在进行物理复制，生产中一般不被允许
    除了在linux命令行直接复制数据文件外，还有一些其他第三方的开源或商业备份工具 如 xtrabackup
    一般在进行大规模迁移数据库时，停库然后物理迁移，是最有效率的方案

如何选择mysql备份方式:
    逻辑备份 物理备份
备份原理 导出mysql语句存储 直接复制磁盘物理文件
备份命令 mysqldump,mysql cp,rsync,tar,scp,xtrabackup
备份要求 需要锁表但不需要停机 需要锁表或停机
特点1配置 恢复时系统、mysql配置，甚至都与版本无关，速度快 需要系统、配置，版本一致
特点2性能 速度较慢 速度较快
特点3方便 容易掌握，一般不会丢失数据 较难掌握，容易丢失数据

mysqldump工具
    mysqldump是目前大众最长使用的备份工具，支持基于innodb的热备份，由于是逻辑备份，速度不是很快100G以内的数据，使用mysqldump足以应付
    mysqldump -F -B -A
    --compact   测试时用的比较多，也可以优化输出内容，让容量更小
    --default-character-set=name 可设置导出的客户端字符集，按照原有字符集导出，中文不会乱码     建议--lock-all-tables(-x) -F 同时使用，否则，同时会出现多个库刷新binlog文件
    -d 只导出表结构，不倒数据
    -大P 端口
    -u
    -p
    -h
    --single-transaction  innodb表在备份时候需要开启此选项，来保证备份的一致性，原理是为本次dump操作设定会话隔离级别为 repeatable read,确保本次会话dump事，不会看到其他会话提交的数据更新

生产环境单机mysql的完全备份
    myisam
    由于myisam引擎为表级锁，备份时需要防止在备份期间数据写入而导致不一致，所以备份时使用--lock-all-tables加上读锁
    mysqldump -A -F -B --lock-all-tables|gzip > ~/bak_$(data +%F).sql.gz
    
    innodb
    innodb引擎为行锁，因此，备份时可以不对数据库加锁的操作，可以加选项--single-transaction备份
    mysqldump -A -F -B --single-transaction|gzip >~/bak_$(date +%F).sql.gz
--single-transaction仅适合innodb。不适合myisam

逻辑备份中的增量备份（配合mysqldump的）（二进制日志备份）
    增量备份的实质就是备份二进制日志
    二进制日志包括但不限于insert,delete,update,alter,create等，特别强调，一定不包含select等查询命令的内容
    二进制日志功能需要在 my.cnf [mysqld]中log-bin=filename  中开启
mysqlbinlog mysqm-bin.000035  查看二进制日志内容

备份二进制日志
法一：
    最简单的办法就是写个定时任务或守护进程，每5分钟或者每分钟或者inotify触发同步来把日志备份到其他磁盘或者服务器上，当然最好的还是主从，从上面开启binlog,在备份
列如   rsync -avzP /data/3306/mysql-bin.* rsync_back@192.168.1.121::mysqlbak/binlog/ --password-file=/etc/rsync.password

法二：
    可以使用mysqladmin的日志切割参数，对binlog按时间切割， 如每15分钟一份，这样在出故障时，容易定位日志位置点，但这不是必须的
    mysqladmin -uroot -pxianghong379 -S /data/3306/mysql.sock flush-logs

删除二进制日志
1、resetmaster;
    删除所有binlog日志，新日志从头开始
2、。。。
3、最好的就是my.cnf 设置 expire_logs_days=7

完全备份+增量备份=完整备份

xtrabackup 物理备份

核心
*分库分表生产备份策略
    为什么要分库分表备份
        全备 整个备份在一个文件里面，不好拆分，耦合度太高，不灵活
    如何进行分库备份
        写脚本，分别备份

生产常用备份架构方案
    全备每日00点执行，先把数据按照日期备份到本地，然后推送到备份服务器，由于本地空间有限，本地仅保留3-7日的全备
    如果是多个服务器，最好通过主从同步的方式进行备份，这样物理机损坏可以很快的切到生产使用（还可以HA自动切换），但是主从同步缺点是不能解决误删及错误执行的sql语句问题，如 drop table test后，从库也会删除，因此我们一般使用mysqldump定时备份，在配合从库延时同步，图45

恢复
    生产中一般常用一主多从的数据库架构，常见的备份方案在某一个不对外的从库上开启binlog,然后实施定时全备和增量备份
什么情况下需要数据库增量恢复呢？
1、主或从宕机（硬件损坏）是否需要增量恢复？
    不需要，只需要把其中一个同步最快的从库切换为主库即可
2、人为操作破坏主库是否需要增量恢复？
    导致数据丢失，从库也可能数据丢失，需要增量恢复
3、只有一个主库是否需要增量恢复？
    如果只有一个主库，要定时全备（每天一次）和增量备份（每隔1-10分钟对binlog日志切割然后备份到其他服务器上，或者本地磁盘）
    如果不能丢失数据，最好的办法就是主从，drbd同步
正常情况下
    主从同步：除了分担读写分离压力，还可以防止物理设备损坏，数据丢失
    从库备份：在从库进行全量和增量方式备份，可以防止人为对主库的误操作导致数据丢失
一般人为进入数据库内的执行的sql误操作语句，需要增量恢复，因为此时，所有的从库也执行了此我操作语句
图46

对于恢复顺序，先恢复全备，在恢复增量备份，恢复增量时候要查看binlog日志，把错误执行的语句踢出去
找原因，弥补，恢复
日志审计

模拟恢复
建立数据库dongweichao
建表students
    use dongweichao
    create table student(Sno int(10) not null comment'学号' primary key auto_increment,Sname varchar(16) not null comment'姓名',Ssex char(2) not null comment'性别',Sage tinyint(2) not null default 0 comment '年龄',Sdept varchar(40) default null comment '系别');
表中插入数据
    insert into student values (0001,'陆亚','男',24,'计算机网络'),(0002,'elain','男',26,'computer application'),(0003,'xiaozhang','男',28,'物流管理'),(0004,'jeacen','女',20,'computer application'),(0005,'张阳','男',29,'计算机科学技术');

mysql> select * from student;
+-----+-----------+------+------+-----------------------+
| Sno | Sname     | Ssex | Sage | Sdept                 |
+-----+-----------+------+------+-----------------------+
|   1 | 陆亚      | 男   |   24 | 计算机网络            |
|   2 | elain     | 男   |   26 | computer application  |
|   3 | xiaozhang | 男   |   28 | 物流管理              |
|   4 | jeacen    | 女   |   20 | computer application  |
|   5 | 张阳      | 男   |   29 | 计算机科学技术        |
+-----+-----------+------+------+-----------------------+
5 rows in set (0.00 sec)

mysql> 

假设0点进行备份，执行了备份脚本
mysqldump -uroot -pxianghong379  -S /usr/local/mysql/data/3306/mysql.sock -F -B -A --single-transaction --events > 111.sql
查看binlog刷新情况，确定增量binlog从哪个开始
数据持续更新中
 mysql> insert into student values (0015,'wdrf','女',29,'asdasd');
Query OK, 1 row affected (0.01 sec)

mysql> insert into student values (0016,'wdrf','男',32,'asdasd');
Query OK, 1 row affected (0.00 sec)
生产环境中，插入数据量不确定

增量备份
一定时间间隔后增量复制了binlog作为增量备份
模拟破坏数据
drop database dongweichao;

查找原因，谁做了什么等等，日志等等，网站报错等等
提示：数据库的权限管理尤为重要，不要随便给人权限

***增量恢复***
检查全备和增量二进制日志是否存在
发现问题时刻第一时间立即刷新binlog切断出问题之前和之后的日志，最小化查找问题
    mysqladmin -uroot -pxianghong379  -S /usr/local/mysql/data/3306/mysql.sock flush-logs
   找到包含错错误操作的日志后cp出来
将增量备份到的binlog与包含错误操作的log何在一起生成sql语句
mysqlbinlog mysql-bin.000037 mysql-bin.000038 > bin.sql
    生产环境中可能日志中的语句报告好多数据库的操作，所以-d dongweichao 选项设置值从binlog中转出与出问题的库dongweichao有关的语句
    mysqlbinlog -d dongweichao mysql-bin.000037 mysql-bin.000038 > bin.sql
如果binlog有多个
mysqlbinlog -d dongweichao mysql-bin.00003{7..8} > bin.sql
egrep -v '#|^$|^\/|*' bin.sql
剔除其中有错操作的语句
全量与增量sql语句文件准备好后，进行恢复
    先恢复到00点的全备
    mysql -uroot -pxianghong379 -S /usr/local/mysql/data/3306/mysql.sock < 111.sql
    在恢复增量数据指定库（看语句而定）
    mysql -uroot -pxianghong379 -S /usr/local/mysql/data/3306/mysql.sock dongweichao < bin.sql

mysqlbinlog恢复指定库的语句 -d dongweichao,生产中很关键的一点，因为生产中一个binlog里面可能有很多库的操作语句

mysqlbinlog增量的恢复方式 多方式
1、基于时间点的恢复
    指定开始时间和结束时间
    mysqlbinlog mysql-bin.000021 --start-datetime='2016-09-07 02:58:54' --stop-datetime='2016-09-07 05:56:20' -r time.sql
    从二进制文件中活动开始结束时间内时间段的语句 并-r输出到time.sql

    指定开始时间到文件结束
    mysqlbinlog mysql-bin.000021 --start-datetime='2016-09-07 02:58:54' -d dongweichao -r time.sql
    
    从开头到指定的结束时间
    同理
    
基于时间点的恢复，不能用于特别精确的恢复，因为一个时间点可能就有多条语句
    
2、基于位置点的恢复,binlog日志中有at 356 这种行，就是位置行
    指定开始和结束位置
    mysqlbinlog mysql-bin.000037 --start-position=510 --stop-position=1312 -r pos.sql
注意：结尾的日志点比较特殊，不会被包含，即恢复1312这句之前的日志，日志点信息要存在，不能乱指定

    其他同上面时间的用法
基于位置点的恢复比较精确

该看40-18视频了，先停在这
