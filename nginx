nginx 与apache相似
    三个主要功能：
        1、高性能的http server
        2、代理，负载均衡服务器软件
        3、也可以做缓存服务器
    nginx 高并发，占用资源少，具备丰富功能特性
nginx特点：
    1、web服务器
        nginx是一个高性能的服务器软件，与apache相比，nginx支持更多的纯静态并发连接，占用资源更少，效率更高,稳定性比apache低一些
    2、反向代理或负载均衡服务器
        nginx可以作为http server 或DB等服务器的代理服务器，类似专业的haproxy代理软件的功能，但是功能相对简单，代理功能及效率不如haproxy
        nginx同时也是一个优秀的邮件代理服务软件（最早开发这个产品的目的之一也是作为邮件代理服务）
    3、缓存服务器
        nginx还可以作为缓存服务器使用，类似于专业的缓存软件，如squid
        nginx的安装简单，配置文件简洁，配置灵活(支持perl语法)
nginx的HTTP服务器功能的特性：
    处理静态文件，索引文件以及自动索引，打开文件描述缓存
    使用缓存加速反向代理，简单负载均衡以及容错
    远程FastCGI服务的缓存加速支持
    模块化架构，过滤器包括gzip压缩，ranges支持，chunked响应，XSLT,SSI以及图像缩放，在SSI过滤器中，一个包含多个SSI的页面，如果经由FastCGI或反向代理处理，可被并行处理
    支持SSL,TLS SNI
    基于名字和ip的虚拟主机
    Keep-alive和pipelined的链接支持
    灵活的配置
    重新加载配置以及在线升级时，不需要中断正在处理的请求
    自定义访问日志格式，带缓存的日志写操作以及快速日志轮转
    3xx-5xx错误代码重定向以及重写（rewrite）模块
    基于客户端ip地址的http基本认证机制的访问控制
    支持PUT、DELETE、MKCOL、COPY、以及MOVE的方法，支持FLV和MP4流
    限制下载及访问速度以及来自同一地址的同时连接数或请求数限制
nginx优点
    1、高并发：能支持1-2万甚至更多的并发连接（静态小文件环境下）
    2、内存消耗少：在3万并发连接下，开启的10个nginx进程消耗不到200M内存
    3、可以做http反向代理，即负载均衡功能，相当于专业的haproxy软件或lvs的功能
    4、内置对RS服务器健康检查功能：如果对nginx代理后端某台web服务器宕机，不会影响前段的访问，这个功能还比较弱，需要改进
    5、通过cache插件（cache_purge）可以实现类squid等专业的缓存软件实现的功能
        nginx最主要的优点是：支持kqueue(FreeBSD4.1+),epoll(linux2.6+)等网络IO事件模型，由此来支持高并发的连接

nginx主要应用场合
    web服务器功能
        使用nginx结合FastCGI运行PHP、JSP等程序
        使用nginx运行html,js,css,小图片等静态数据等
    负载均衡反向代理功能
        使用nginx做反向代理、负载均衡、规则过滤
    缓存
        使用nginx加cache插件实现对web服务器缓存功能
提示：
    经过实际测试，nginx对于纯静态小文件html页，图片等资源，apache确实要比nginx逊色，但是结合php引擎提供的php服务及其他很多方面并不比nginx差，而apache的稳定性相对要好一些，实际应用中要根据具体业务具体需求来选择

主流web服务产品对比
apache
    2.2版本非常稳定强大，2.4版本性能强
    prefork模式取消了进程创建开销，性能很高
    处理动态业务数据时，因关联到后端的引擎和数据库，瓶颈不在apache本身
    高并发时消耗系统资源相对比较多一些
nginx
    基于异步IO模型，性能强，能够支持上万并发
    对于小文件支持很好，性能很高（限静态小文件）
    代码优美，扩展库必须编译进主程序
    消耗系统资源比较低
lighttpd
    基于异步IO模型，性能和nginx想进
    扩展库是SO模式，比nginx要灵活
    全球使用率比以前低，安全性没有上面两个好
    通过插件（mod_secdownload）可实现文件URL地址加密

通过数据测试对比
结论：
    1、处理静态小文件（小于1M），nginx和lighttpd比apache更有优势，lighttpd最强
    2、处理动态数据时，三者差距不大，apache更有优势一点，这是因为处理动态数据的能力取决于php和后端数据库的提供服务能力，也就是说瓶颈不在web服务器上，一般php支持的并发参考值300-1000，java引擎300-1000

为什么nginx的总体性能比apache高?
    nginx使用最新的epoll(linux2.6内核)和kqueue(freebsd)网络IO模型，而apache则使用传统的select模型，目前linux下能够承受高并发访问的squid，Memcached都采用的是epoll网络IO模型
    处理大量链接的读写，apache所采用的select网络IO模型比较低效，下面用一个比喻来解析apache-select，和nginx-epoll的区别
        假设你在大学读书，住的宿舍有很多房间，你的朋友来找你，select版大妈就会带着你的朋友挨个房间找，直到找到。而epoll版大妈会先记下每个进入的人的房间号，你朋友来后，直接告诉房间号，效率高

如何正确选择web服务器：
    静态业务：采用nginx或lighttpd
    动态业务：采用nginx和apache均可
    动态业务可以由前端代理（haproxy）,根据页面元素类型，向后转发相应的服务器进行处理
        如果并发不是很大，有对apache很熟悉，采用apache就可以
提示：nginx做web（apache,lighttpd）、反向代理（haproxy,lvs nat） 及缓存服务器（squid）也是不错的    既有静态业务又有动态业务：
        nginx,apache(可以这样选，但是学习成本，维护成本大，最好选择单一软件，根据访问量决定)

nginx安装,两种方法
1、rpm方式，默认nginx软件包不在yum软件仓库中，需要去官网下载rpm包，http://nginx.org/en/download.html,http://nginx.org/download/nginx-1.10.1.tar.gz,然后rpm命令安装
    为了支持gzip和rewrite的正则，确认zlib,zlib-devel.pcre已经装好
        yum install zlib zlib-devel pcre -y
    然后安装下载到的rpm包
        rpm -ivh nginx-1.10.1.1xxxx.rpm
    配置文件
        /etc/nginx/nginx.conf(rpm安装情况下)
    主目录
        /usr/share/nginx/html(rpm安装情况下)
    查看版本
        /usr/sbin/nginx -v
    对配置文件语法检查
        /usr/sbin/nginx -t
    启动
        /etc/init.d/nginx start
    停止
        /etc/init.d/nginx stop
    改配置文件后，平滑重启
        /etc/init.d/nginx reload
注：重启也可以用发信号的方式
、      kill -HUP `cat /var/run/nginx.pid`  向master进程的PID发送信号

nginx支持的信号
    TEM,INT  快速关闭
    QUIT   正常关闭
    HUP   平滑重启reload,重新加载配置文件
    USR1   重新打开日志文件，在切割日志时有用
    USR2   平滑升级
    WINCH   从容关闭工作woker进程（只剩主进程master)
需要向master进程的PID发送信号
nginx的工作模式是1个master进程+N个woker进程

编译安装nginx
    到目前为止，还未发现操作系统盘自带或者yum可以直接通过rpm包安装方法安装nginx的情况，如果大规模的安装可以定制rpm来安装
    1、安装nginx所需的pcre库（perl兼容正则表达式），www.pcre.org,安装pcre库是为了使nginx支持http rewrite模块
        mkdir -p ~/tools
        cd ~/tools
        sudo su -
        wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz
        tar xf pcre-8.39.tar.gz
        echo $?
        cd pcre-8.39.tar.gz
        yum install gcc gcc-c++
        ./configure
        echo $?
        make && make install 
        echo $?
        cd ../
提示：configure时候最好使用默认路径，经测试指定路径后，安装nginx容易出错
    
    2、安装nginx
        cd ~/tools
        sudo su -
        wget http://nginx.org/download/nginx-1.10.1.tar.gz
        useradd nginx -M -s /sbin/nologin
        tar xf nginx-1.10-1.tar.gz
        cd nginx-1.10-1
        ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx-1.10.1 --with-http_stub_status_module --with-http_ssl_module
        make && make install
        ln -s /usr/local/nginx-1.10-1 /usr/local/nginx
centos6.4最小化安装出错信息：
    ./configure: error: SSL modules require the OpenSSL library.
    You can either do not enable the modules, or install the OpenSSL library
    into the system, or build the OpenSSL library statically from the source
    with nginx by using --with-openssl=<path> option.
            解决：yum install openssl openssl-devel 或者yum install openssl* -y
            思路缺少librare  lib等库文件，一般是开发包devel没有安装导致
提示：
    这条ln命令意义重大，生产经验
    安装指定版本号路径，方便查看及升级
    软连接方便人类使用

  nginx path prefix: "/usr/local/nginx-1.10.1"
  nginx binary file: "/usr/local/nginx-1.10.1/sbin/nginx"
  nginx modules path: "/usr/local/nginx-1.10.1/modules"
  nginx configuration prefix: "/usr/local/nginx-1.10.1/conf"
  nginx configuration file: "/usr/local/nginx-1.10.1/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx-1.10.1/logs/nginx.pid"
  nginx error log file: "/usr/local/nginx-1.10.1/logs/error.log"
  nginx http access log file: "/usr/local/nginx-1.10.1/logs/access.log"
  nginx http client request body temporary files: "client_body_temp"
  nginx http proxy temporary files: "proxy_temp"
  nginx http fastcgi temporary files: "fastcgi_temp"
  nginx http uwsgi temporary files: "uwsgi_temp"
  nginx http scgi temporary files: "scgi_temp"

nginx 直接configure也会内置大部分模块，也能跑的很好
安装完成

启动:
    先检查启动脚本语法
        /usr/local/nginx/sbin/nginx -t
            [root@6.4-121 nginx-1.10.1]#/usr/local/nginx/sbin/nginx -t
            /usr/local/nginx/sbin/nginx: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory
        遇到以上错误（libpcre.so.1这个库文件没有在系统的库文件目录里面）  
            解决办法,find这个库文件，加入到系统库文件目录中，或者把查找到的路径加入到/etc/ld.so.conf中
            find / -name "libpcre.so.1"
                [root@6.4-121 nginx-1.10.1]#find / -name "libpcre.so.1"
                /usr/local/lib/libpcre.so.1
                /home/dean/tools/pcre-8.39/.libs/libpcre.so.1
            echo "/usr/local/lib/" >> /etc/ld.so.conf
            ldconfig  (让修改生效)
    启动ngix
        /usr/local/nginx/sbin/nginx
    查看
        lsof -i tcp:80
        netstat -lntup|grep 80
    停止
        /usr/local/nginx/sbin/nginx -s stop
    重新加载配置文件
        /usr/local/nginx/sbin/nginx -s reload  或者 kill -HUP `cat /usr/local/nginx/logs/nginx.pid`
    
    客户端链接ip测试
        故障排查思想：
        如果不能访问，进行排查
            客户端ping ip               排除物理线路不通的情况
            客户端telnet ip 服务端口      排除防火墙，服务端口开启
            服务端 wget ip           模拟用户访问，排除http服务自身的问题，selinux的问题
            服务端日志           查找其他位置错误

疑难问题补充
   1、 nginx:[emerg]getpwnam("nginx") failed  配置时制定了nginx用户，但是系统没添加
        解决：useradd nginx -s /sbin/nologin -M
   2、gcc gcc-c++ 没安装 make报错

关于nginx模块：
    nginx使用不同的模块来实现不同的功能，主要有2组重要的模块
        1、nginx core modules(必需的)
            包括
            main
            events
        2、standard http modules(虽然不必须，但是缺省都会安装，不建议改动）
            典型包括
            core
            access
            fastcgi  与php沟通
            gzip   压缩
            log   日志
            proxy  
            rewrite  重写url
            upstream 负载均衡模块
            等等
    提示：缺省情况下，以上两组模块都会安装,修改配置文件，主要是根据这2组模块的功能来修改模块参数

nginx目录结构：
    [root@6.4-121 nginx-1.10.1]#ll /usr/local/nginx/
    total 36
    drwx------. 2 nginx root 4096 Aug 23 12:11 client_body_temp
    drwxr-xr-x. 2 root  root 4096 Aug 23 11:15 conf
    drwx------. 2 nginx root 4096 Aug 23 12:11 fastcgi_temp
    drwxr-xr-x. 2 root  root 4096 Aug 23 11:15 html
    drwxr-xr-x. 2 root  root 4096 Aug 23 12:11 logs
    drwx------. 2 nginx root 4096 Aug 23 12:11 proxy_temp
    drwxr-xr-x. 2 root  root 4096 Aug 23 11:15 sbin
    drwx------. 2 nginx root 4096 Aug 23 12:11 scgi_temp
    drwx------. 2 nginx root 4096 Aug 23 12:11 uwsgi_temp
    [root@6.4-121 nginx-1.10.1]#

[root@6.4-121 nginx]#tree
.
├── client_body_temp-------------------------客户端body临时文件
├── conf-------------------------------------nginx所有配置文件的目录，极其重要
│   ├── fastcgi.conf--------------------------和php打交道修改这个配置，修改机会不多
│   ├── fastcgi.conf.default
│   ├── fastcgi_params----------------fastcgi参数文件
│   ├── fastcgi_params.default
│   ├── koi-utf
│   ├── koi-win
│   ├── mime.types
│   ├── mime.types.default------------default是不带default的一个备份
│   ├── nginx.conf-------------------主配置文件
│   ├── nginx.conf.default
│   ├── scgi_params
│   ├── scgi_params.default
│   ├── uwsgi_params
│   ├── uwsgi_params.default
│   └── win-utf
├── fastcgi_temp------------------临时目录
├── html-------------------这是编译安装时nginx的默认站点目录，类似于apache的htdocs目录
│   ├── 50x.html-----------错误页面优雅替代显示文件，通过error_page 配置
│   └── index.html---------默认的首页文件
├── logs-----------默认log目录。包括错误日志及访问日志
│   ├── access.log ----访问日志
│   ├── error.log------错误日志
│   └── nginx.pid-------nginx进程号的文件
├── proxy_temp
├── sbin
│   └── nginx---------nginx启动文件
├── scgi_temp
└── uwsgi_temp

9 directories, 21 files
[root@6.4-121 nginx]#

nginx主配置文件nginx.conf
    整个配置文件以块的形式组织，每个块一般以一个{}来表示，块可以分几个层次，整个配置文件中Main指令位于最高层，在Main层下面有Events、HTTP等层级，而在HTTP层中又包含Server层，及server block,server block中又可分为location层，并且一个server block中可以包含多个location block
    [root@6.4-121 conf]#grep -vE '#|^$' nginx.conf|cat -n
     1  worker_processes  1;-------------worker的进程数量，相当于饭点服务员的数量，一般配置成和cpu的核数相当或者核数乘以2,一般8到16
     2  events {-----------------------------------events区块
     3      worker_connections  1024;-------------最多允许一段时间内同时链接的最大的连接数
     4  }
     5  http {---------------------------http区块
     6      include       mime.types;--------全局参数
     7      default_type  application/octet-stream;----全局参数
     8      sendfile        on;------全局参数
     9      keepalive_timeout  65;-----全局参数
    10      server {-----------------------一个虚拟主机的配置
    11          listen       80;-------监听端口
    12          server_name  localhost;-----标识server 用ip 域名等
    13          location / {---------------------重定向
    14              root   html;-------------默认根目录
    15              index  index.html index.htm;------首页文件
    16          }
    17          error_page   500 502 503 504  /50x.html;-------------错误代码都重定向到50x.html错误页面优雅显示，50x.html是自己设计的
    18          location = /50x.html {----------------定义了50x.html的物理目录，可修改
    19              root   html;
    20          }
    21      }
    22  }
    [root@6.4-121 conf]#

nginx其他配置文件
    nginx软件还会用到扩展的fastcgi相关配置文件，是通过nginx.conf主配置文件中嵌入Include命令实现的，不过默认情况是注释状态
    fastcgi.conf

        [root@6.4-121 conf]#cat fastcgi.conf

        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
        fastcgi_param  QUERY_STRING       $query_string;
        fastcgi_param  REQUEST_METHOD     $request_method;
        fastcgi_param  CONTENT_TYPE       $content_type;
        fastcgi_param  CONTENT_LENGTH     $content_length;
        
        fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
        fastcgi_param  REQUEST_URI        $request_uri;
        fastcgi_param  DOCUMENT_URI       $document_uri;
        fastcgi_param  DOCUMENT_ROOT      $document_root;
        fastcgi_param  SERVER_PROTOCOL    $server_protocol;
        fastcgi_param  REQUEST_SCHEME     $scheme;
        fastcgi_param  HTTPS              $https if_not_empty;
        
        fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
        fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
        
        fastcgi_param  REMOTE_ADDR        $remote_addr;
        fastcgi_param  REMOTE_PORT        $remote_port;
        fastcgi_param  SERVER_ADDR        $server_addr;
        fastcgi_param  SERVER_PORT        $server_port;
        fastcgi_param  SERVER_NAME        $server_name;
        
        # PHP only, required if PHP was built with --enable-force-cgi-redirect
        fastcgi_param  REDIRECT_STATUS    200;
        [root@6.4-121 conf]#

vimdiff 比较两文件重复的命令
diff  也是比较两文件重复的命令
    fastcgi_params
        [root@6.4-121 conf]#diff fastcgi_params fastcgi.conf
        1a2
        > fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;

配置nginx虚拟主机
    虚拟主机分类
        基于域名   最重要
        基于端口   次重要
        基于ip    不重要

基于域名
    http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen       80;
        server_name  www.eee.com eee.com;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

#www_eee_com
    server {
        listen       80;
        server_name  www.eee.com eee.com;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
#www_eee2_com
    server {
        listen       80;
        server_name  www.eee2.com eee2.com;
        location / {
            root   html/www2;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

上述文件创建了两个基于域名的虚拟主机，同时ip也可以访问，如果想禁止ip访问，可以创建一个空的server虚拟主机，然后重定向到其他server
#ip
    server {
        listen       80;
        server_name  127.0.0.1 localhost;
        location / {
            root   html/www2;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
#www_eee_com
    server {
        listen       80;
        server_name  www.eee.com eee.com;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
#www_eee2_com
    server {
        listen       80;
        server_name  www.eee2.com eee2.com;
        location / {
            root   html/www2;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
    
基于端口的虚拟主机
#www_eee_com
    server {
        listen       8000;
        server_name  www.eee.com eee.com;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

基于ip的
linux 命令行增加ip
ifconfig eth0:0 192.168.1.128/24 up  重启失效，永久生效需要写入配置文件 /etc/sysconfig/network-script/ifcfg_eth0:0

回顾配置虚拟主机流程
    复制server标签段，注意放在http的结束大括号前
    更改server_name及对应网页的根目录
    检查语法，重启服务
    创建server_name对应的网页的根目录，并且建立测试文件
    在客户端对server_name 的主机做host解析或dns配置，并检查
    浏览器访问测试

为虚拟主机增加日志配置
    1、先配置error_log
    worker_processes  8;----位置
    error_log /tmp/logs/err.log  crit;------这项是
    events {-----位置
日志项的官方文档
    http://nginx.org/en/docs/ngx_core_module.html#error_log
    2、还可以配置events,看官方文档
    http://nginx.org/en/docs/ngx_core_module.html#events
        worker_processes  8;
        error_log /tmp/logs/err.log  crit;
        events {
            worker_connections  1024;
            use epoll;---------------使用epoll模式
        }
    3、log_format,这个格式默认的在nginx.conf.default里面，copy到nginx.conf
        文档 http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
        放在http块中
            http {
                include       mime.types;
                default_type  application/octet-stream;
            
                #log_format combined '$remote_addr - $remote_user [$time_local] "$request" '
                #                  '$status $body_bytes_sent "$http_referer" '
                #                  '"$http_user_agent" "$http_x_forwarded_for"';

    4、访问日志
        http {
            include       mime.types;
            default_type  application/octet-stream;
        
            #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
            #                  '$status $body_bytes_sent "$http_referer" '
            #                  '"$http_user_agent" "$http_x_forwarded_for"';
                main,combined等是日志级别，需要看文档
        
            #access_log  logs/access.log  main;------main是调用log_format里的main 这两个要一至
    http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log

            日志格式各项含义
                $remote_addr 客户端ip地址
                $remote_user 客户端用户名
                $time_local  记录访问时间及时区
                $request     用户的请求，使用的http协议
                $status     返回状态码，200,304,404等
                $body_bytes_sent   发送的body字节数
                $http_referer    引用页（从哪个链接访问来的）
                $http_user_agent  客户端浏览器
                $http_x_forwarded_for 客户端ip地址，代理服务器地址等
日志轮询
    工作场景通过写脚本实现日志轮询
    vim cut_nginx.sh
        #!/bin/bash
        /bin/mv ip_access.log ip_access_$(date +%F).log
        /bin/mv eee_access.log eee_access_$(date +%F).log
        /bin/mv eee2_access.log eee2_access_$(date +%F).log
        /usr/local/nginx/sbin/nginx -s reload
    然后crontab定时任务
        00 00 * * * /bin/sh /tmp/cut_nginx.sh >/dev/null 2>&1
    也可以详细丰富脚本功能，详细判断，rsync推送等

日志数据筛选处理
    1、取出访问客户端ip地址，按访问量排序，（百度面试题）
        日志文件内容第一字段包含多个ip,对其进行数量排序
    此类问题为工作中最常见问题，可以演变成分析日志，查看TCP各个状态连接数，查看ip连接数排名等等
            192.168.1.107
            192.168.1.107
            192.168.1.106
            192.168.1.107
            192.168.1.104
            192.168.1.107
            192.168.1.107
            192.168.1.108
            192.168.1.107
            192.168.1.107
            192.168.1.117
            192.168.1.127
            192.168.1.137
        法一：cut切割 |sort 排序| uniq -c 计数
        法二：awk切割 |sort排序 |uniq -c计数
        法三：sed替换关键符号等| sort排序 |uniq -c计数
        法四：cat读入 |tr 分割替换|grep 选择关键字行|sort 排序|uniq -c 计数
        法五：sed +完全正则匹配 |sort|uniq -c
              awk 数组方式|sort|uniq -c
        法六：awk+数组+循环for等
        法。。。很多
        好文章图37

nginx日志分析软件 awstats 自行研究

nginx别名在server_name 后面添加虚拟主机域名即可，用于负载均衡的健康检查识别机器
虚拟主机状态信息添加
nginx.conf
    #添加虚拟主机状态
    server {
        listen       80;
        server_name  status.eee.com;
        location / {
            stub_status on;
            access_log off;
        }
    }

Active connections: 2 ------------------------- nginx 正在处理的活动连接数2个
server accepts handled requests-----------------server表示nginx从启动到现在共处理了多少个链接，accepts表示nginx启动到现在共创建了多少次握手（请求丢失数=（握手数-连接数），可以看出来还没有请求丢失），handled requests表示总共处理了多少次请求
 72 72 86 
Reading: 0 Writing: 1 Waiting: 1 ------------- reading表示nginx读取到客户端的header信息数，writing表示nginx返给给客户端的header数，waiting表示已经处理完正在等候下一次请求指令的驻留连接，在开启keep-alive的情况下，这个值等于active-(reading+writing)

补充：也可以用location的方式实现状态信息配置，可以限制ip访问
    nginx.conf
     server{   
        listen  80;
        location / {
            stub_status on;
            access_log off;
            allow 192.168.1.197;-------允许
            deny all;------------------禁止
        }
      }

优化nginx配置文件
1、利用include 将nginx.conf 与server的配置到分开，虚拟主机很多的情况下便于管理为维护
cd /usr/local/nginx/conf
mkdir extra
vim nginx
    
worker_processes  8;
error_log /tmp/logs/err.log  crit;
events {
    worker_connections  1024;
    use epoll;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
    include extra/http_vhosts.conf;-----------------利用包含
}

http_vhosts.conf
#ip
    server {
        listen       80;
        server_name  127.0.0.1 localhost;
        location / {
            stub_status on;
            access_log off;
        }
    }
#www_eee_com
    server {
        listen       80;
        server_name  www.eee.com eee.com;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        access_log  /tmp/logs/eee_access.log  main;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

2、nginx expires 服务端文件在客户端缓存存在多久
    expires 12h;  一般用于设置html，图片，js,css,xml缓存对象
        http://nginx.org/en/docs/http/ngx_http_core_module.html
    范例1：
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires 3650d;
        }
    范例二：
        location ~ .*\.(js|css)?$
        { 
            expires 30d; 

#www_eee_com
    server {
        listen       80;
        server_name  www.eee.com eee.com;
        location / {
            root   html/www;
            index  index.html index.htm;
        }
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
                expires 3650d;---------（y年，d天，s秒）
                root html/www;
        }
        access_log  /tmp/logs/eee_access.log  main;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

        }
location ~ 要优先于location /格式
    查看expires效果，服务端用curl -I 查看
    客户端用火狐浏览器 firebug+yslow插件查看
    还可以根据目录添加缓存，目录内的所有文件都会被缓存
    还可以设置单个文件添加缓存
        等待apache视频回来添加
做长时间缓存可以省带宽，51cto中小网站代表，做的不够好
3、nginx gzip
4、nginx rewrite
